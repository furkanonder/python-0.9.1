CC = cc
CFLAGS = -Wall

# Tools
AR = ar
RANLIB = ranlib

# Libraries and paths
LIBS = -lm
PYTHON_PATH_DEF = '-DPYTHONPATH=".:../lib"'

# Check for optional features (will be set by configure script)
READLINE_AVAILABLE = @READLINE_AVAILABLE@

# Set up feature-specific flags and libraries
ifeq ($(READLINE_AVAILABLE), yes)
  READLINE_LIBS = -lreadline
  LIBS += $(READLINE_LIBS)
  RL_USE =	-DUSE_READLINE
endif

# Output files
TARGET = python
LIBPYTHON = libpython.a
PGEN = python_gen

# Object files groups
STANDARD_OBJS = \
	acceler.o bltinmodule.o ceval.o classobject.o compile.o \
	dictobject.o errors.o fgetsintr.o fileobject.o floatobject.o \
	frameobject.o funcobject.o graminit.o grammar1.o import.o intobject.o \
	intrcheck.o listnode.o listobject.o mathmodule.o methodobject.o \
	modsupport.o moduleobject.o node.o object.o parser.o parsetok.o \
	posixmodule.o regexp.o regexpmodule.o stringobject.o structmember.o \
	sysmodule.o timemodule.o tokenizer.o traceback.o tupleobject.o \
	typeobject.o

PGEN_OBJS = \
	acceler.o fgetsintr.o grammar1.o intrcheck.o listnode.o node.o \
	parser.o parsetok.o tokenizer.o bitset.o firstsets.o grammar.o \
	metagrammar.o pgen.o pgenmain.o printgrammar.o

# Default target
all: $(TARGET)

# Main target
$(TARGET): $(PGEN) $(LIBPYTHON) pythonmain.o config.o
	$(CC) pythonmain.o config.o $(LIBPYTHON) $(LIBS) -o $(TARGET)

# Library target
$(LIBPYTHON): $(STANDARD_OBJS)
	$(AR) cr $(LIBPYTHON) $(STANDARD_OBJS)
	$(RANLIB) $(LIBPYTHON)

# Grammar generator
$(PGEN): $(PGEN_OBJS)
	$(CC) $(CFLAGS) -o $(PGEN) $(PGEN_OBJS) $(READLINE_LIBS)
	./$(PGEN) Grammar

# Generate the grammar
graminit.c graminit.h: Grammar $(PGEN)
	./$(PGEN) Grammar

# Special files with additional dependencies
pythonmain.o: pythonmain.c
	$(CC) $(CFLAGS) -c pythonmain.c

config.o: config.c
	$(CC) $(CFLAGS) $(PYTHON_PATH_DEF) -c config.c

tokenizer.o: tokenizer.c
	$(CC) $(CFLAGS) $(RL_USE) -c tokenizer.c

# Testing
test: $(TARGET)
	./$(TARGET) ../lib/testall.py

# Clean up
clean:
	rm -f *.o $(TARGET) $(LIBPYTHON) $(PGEN) graminit.c graminit.h pyconfig.h

# Show help
help:
	@echo "Targets:"
	@echo "  all      - Build the Python interpreter"
	@echo "  test     - Run tests"
	@echo "  clean    - Remove build files"
	@echo "  help     - Show this help"

.PHONY: all clean test help
